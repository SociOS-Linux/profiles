/**
 * Tracks a changing store, derived at each update
 */
export class DynamicStore {
    constructor(host, getStore) {
        this.host = host;
        this.getStore = getStore;
        host.addController(this);
    }
    hostUpdate() {
        this.resubscribe();
    }
    hostDisconnected() {
        this._unsubscribe();
    }
    resubscribe() {
        const store = this.getStore();
        if (store !== this._previousStore) {
            if (this._unsubscribe)
                this._unsubscribe();
            if (store) {
                this._unsubscribe = store.subscribe((value) => {
                    this.value = value;
                    this.host.requestUpdate();
                });
            }
        }
        this._previousStore = store;
    }
}
//# sourceMappingURL=dynamic-store.js.map