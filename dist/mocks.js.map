{"version":3,"file":"mocks.js","sourceRoot":"","sources":["../src/mocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAC7D,OAAO,EAEL,eAAe,EACf,aAAa,GACd,MAAM,gCAAgC,CAAC;AAIxC,MAAM,KAAK,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAE9E,MAAM,OAAO,gBAAiB,SAAQ,UAAU;IAC9C,YACY,SAA8B,EAAE,EAChC,UAAkB,GAAG;QAE/B,KAAK,CAAC,IAAW,EAAE,IAAW,CAAC,CAAC;QAHtB,WAAM,GAAN,MAAM,CAA0B;QAChC,YAAO,GAAP,OAAO,CAAc;IAGjC,CAAC;IAED,IAAI,MAAM;QACR,OAAO;YACL,eAAe,CAAC,kDAAkD,CAAC;YACnE,eAAe,CAAC,kDAAkD,CAAC;SACpE,CAAC;IACJ,CAAC;IAED,IAAI,WAAW;QACb,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,cAAc,CAAC,EAAE,QAAQ,EAAwB;QAC/C,MAAM,KAAK,GAAiB;YAC1B,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE;SAClC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,eAAe,CAAC,EAAE,cAAc,EAA8B;QAC5D,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAC5B,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAC1D,CAAC;IACJ,CAAC;IAED,cAAc;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE/C,IAAI,CAAC,KAAK;YAAE,OAAO,SAAS,CAAC;QAC7B,OAAO;YACL,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;SAC3C,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,aAA6B;QAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC5C,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;IACnC,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,SAAS,CAAC,aAA6B;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,KAAK,aAAa,CAAC,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,QAAQ,CACZ,QAAgB,EAChB,MAAc,EACd,OAAY,EACZ,OAAgB;QAEhB,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1B,OAAQ,IAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACD,gBAAgB,CAAC,aAA0B;QACzC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import { CellClient } from '@holochain-open-dev/cell-client';\nimport {\n  AgentPubKeyB64,\n  deserializeHash,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport { CellId, AppSignalCb } from '@holochain/client';\nimport { AgentProfile } from './types';\n\nconst sleep = (ms: number) => new Promise(r => setTimeout(() => r(null), ms));\n\nexport class ProfilesZomeMock extends CellClient {\n  constructor(\n    protected agents: Array<AgentProfile> = [],\n    protected latency: number = 500\n  ) {\n    super(null as any, null as any);\n  }\n\n  get cellId(): CellId {\n    return [\n      deserializeHash('uhC0kkSpFl08_2D0Pvw2vEVEkfSgDVZCkyOf1je6qIdClO1o'),\n      deserializeHash('uhCAk6oBoqygFqkDreZ0V0bH4R9cTN1OkcEG78OLxVptLWOI'),\n    ];\n  }\n\n  get myPubKeyB64() {\n    return serializeHash(this.cellId[1]);\n  }\n\n  create_profile({ nickname }: { nickname: string }) {\n    const agent: AgentProfile = {\n      agentPubKey: this.myPubKeyB64,\n      profile: { nickname, fields: {} },\n    };\n    this.agents.push(agent);\n\n    return agent;\n  }\n\n  search_profiles({ nicknamePrefix }: { nicknamePrefix: string }) {\n    return this.agents.filter(a =>\n      a.profile.nickname.startsWith(nicknamePrefix.slice(0, 3))\n    );\n  }\n\n  get_my_profile() {\n    const agent = this.findAgent(this.myPubKeyB64);\n\n    if (!agent) return undefined;\n    return {\n      agentPubKey: agent.agentPubKey,\n      profile: agent ? agent.profile : undefined,\n    };\n  }\n\n  get_agent_profile(agent_address: AgentPubKeyB64) {\n    const agent = this.findAgent(agent_address);\n    return agent ? agent : undefined;\n  }\n\n  get_all_profiles() {\n    return this.agents;\n  }\n\n  findAgent(agent_address: AgentPubKeyB64) {\n    return this.agents.find(user => user.agentPubKey === agent_address);\n  }\n\n  async callZome(\n    zomeName: string,\n    fnName: string,\n    payload: any,\n    timeout?: number\n  ): Promise<any> {\n    await sleep(this.latency);\n    return (this as any)[fnName](payload);\n  }\n  addSignalHandler(signalHandler: AppSignalCb): { unsubscribe: () => void } {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}