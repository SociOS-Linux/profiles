{"version":3,"file":"profiles-store.js","sourceRoot":"","sources":["../src/profiles-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { CellClient } from '@holochain-open-dev/cell-client';\nimport {\n  AgentPubKeyB64,\n  Dictionary,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport merge from 'lodash-es/merge';\n\nimport { ProfilesService } from './profiles-service';\nimport { AgentProfile, Profile } from './types';\nimport { writable, Writable, derived, Readable, get } from 'svelte/store';\nimport { defaultConfig, ProfilesConfig } from './config';\n\nexport class ProfilesStore {\n  /** Private */\n  private _service: ProfilesService;\n  private _knownProfilesStore: Writable<Dictionary<Profile>> = writable({});\n\n  /** Static info */\n  public myAgentPubKey: AgentPubKeyB64;\n\n  /** Readable stores */\n  public knownProfiles: Readable<Dictionary<Profile>> = derived(\n    this._knownProfilesStore,\n    i => i\n  );\n  public myProfile: Readable<Profile> = derived(\n    this._knownProfilesStore,\n    profiles => profiles[this.myAgentPubKey]\n  );\n\n  profileOf(agentPubKey: AgentPubKeyB64): Readable<Profile> {\n    return derived(this._knownProfilesStore, profiles => profiles[agentPubKey]);\n  }\n\n  config: ProfilesConfig;\n\n  constructor(\n    protected cellClient: CellClient,\n    config: Partial<ProfilesConfig>\n  ) {\n    this.config = merge(defaultConfig, config);\n    this._service = new ProfilesService(cellClient, this.config.zomeName);\n    this.myAgentPubKey = serializeHash(cellClient.cellId[1]);\n  }\n\n  /** Actions */\n  async fetchAllProfiles(): Promise<void> {\n    const allProfiles = await this._service.getAllProfiles();\n\n    this._knownProfilesStore.update(profiles => {\n      for (const profile of allProfiles) {\n        profiles[profile.agent_pub_key] = profile.profile;\n      }\n      return profiles;\n    });\n  }\n\n  async fetchAgentProfile(agentPubKey: AgentPubKeyB64): Promise<Profile> {\n    // For now, optimistic return of the cached profile\n    // TODO: implement cache invalidation\n\n    const knownProfiles = get(this._knownProfilesStore);\n\n    if (knownProfiles[agentPubKey]) return knownProfiles[agentPubKey];\n\n    const profile = await this._service.getAgentProfile(agentPubKey);\n\n    this._knownProfilesStore.update(profiles => {\n      profiles[profile.agent_pub_key] = profile.profile;\n      return profiles;\n    });\n    return profile.profile;\n  }\n\n  async fetchMyProfile(): Promise<void> {\n    const profile = await this._service.getMyProfile();\n    if (profile) {\n      this._knownProfilesStore.update(profiles => {\n        profiles[profile.agent_pub_key] = profile.profile;\n        return profiles;\n      });\n    }\n  }\n\n  async searchProfiles(nicknamePrefix: string): Promise<AgentProfile[]> {\n    const searchedProfiles = await this._service.searchProfiles(nicknamePrefix);\n\n    this._knownProfilesStore.update(profiles => {\n      for (const profile of searchedProfiles) {\n        profiles[profile.agent_pub_key] = profile.profile;\n      }\n      return profiles;\n    });\n    return searchedProfiles;\n  }\n\n  async createProfile(profile: Profile): Promise<void> {\n    await this._service.createProfile(profile);\n\n    this._knownProfilesStore.update(profiles => {\n      profiles[this.myAgentPubKey] = profile;\n      return profiles;\n    });\n  }\n}\n"]}