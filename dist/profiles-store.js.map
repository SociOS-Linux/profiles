{"version":3,"file":"profiles-store.js","sourceRoot":"","sources":["../src/profiles-store.ts"],"names":[],"mappings":"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","sourcesContent":["import { CellClient } from '@holochain-open-dev/cell-client';\nimport {\n  AgentPubKeyB64,\n  Dictionary,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\n\nimport { ProfilesService } from './profiles-service';\nimport { AgentProfile, Profile } from './types';\nimport { writable, Writable, derived, Readable, get } from 'svelte/store';\n\nexport interface ProfilesStore {\n  /** Static info */\n  myAgentPubKey: AgentPubKeyB64;\n\n  /** Readable stores */\n  knownProfiles: Readable<Dictionary<Profile>>;\n  myProfile: Readable<Profile>;\n\n  /** Actions */\n  fetchAllProfiles: () => Promise<void>;\n  fetchAgentProfile: (agentPubKey: AgentPubKeyB64) => Promise<Profile>;\n  fetchMyProfile: () => Promise<void>;\n  searchProfiles: (nicknamePrefix: string) => Promise<AgentProfile[]>;\n  createProfile: (profile: Profile) => Promise<void>;\n}\n\nconst fetchAllProfiles =\n  (\n    service: ProfilesService,\n    knownProfilesStore: Writable<Dictionary<Profile>>\n  ) =>\n  async () => {\n    const allProfiles = await service.getAllProfiles();\n\n    knownProfilesStore.update(profiles => {\n      for (const profile of allProfiles) {\n        profiles[profile.agent_pub_key] = profile.profile;\n      }\n      return profiles;\n    });\n  };\n\nconst fetchAgentProfile =\n  (\n    service: ProfilesService,\n    knownProfilesStore: Writable<Dictionary<Profile>>\n  ) =>\n  async (agentPubKey: string): Promise<Profile> => {\n    // For now, optimistic return of the cached profile\n    // TODO: implement cache invalidation\n\n    const knownProfiles = get(knownProfilesStore);\n\n    if (knownProfiles[agentPubKey]) return knownProfiles[agentPubKey];\n\n    const profile = await service.getAgentProfile(agentPubKey);\n\n    knownProfilesStore.update(profiles => {\n      profiles[profile.agent_pub_key] = profile.profile;\n      return profiles;\n    });\n    return profile.profile;\n  };\n\nconst fetchMyProfile =\n  (\n    service: ProfilesService,\n    knownProfilesStore: Writable<Dictionary<Profile>>\n  ) =>\n  async () => {\n    const profile = await service.getMyProfile();\n    if (profile) {\n      knownProfilesStore.update(profiles => {\n        profiles[profile.agent_pub_key] = profile.profile;\n        return profiles;\n      });\n    }\n  };\n\nconst searchProfiles =\n  (\n    service: ProfilesService,\n    knownProfilesStore: Writable<Dictionary<Profile>>\n  ) =>\n  async (nicknamePrefix: string): Promise<AgentProfile[]> => {\n    const searchedProfiles = await service.searchProfiles(nicknamePrefix);\n\n    knownProfilesStore.update(profiles => {\n      for (const profile of searchedProfiles) {\n        profiles[profile.agent_pub_key] = profile.profile;\n      }\n      return profiles;\n    });\n    return searchedProfiles;\n  };\n\nconst createProfile =\n  (\n    service: ProfilesService,\n    knownProfilesStore: Writable<Dictionary<Profile>>,\n    myAgentPubKey: AgentPubKeyB64\n  ) =>\n  async (profile: Profile): Promise<void> => {\n    await service.createProfile(profile);\n\n    knownProfilesStore.update(profiles => {\n      profiles[myAgentPubKey] = profile;\n      return profiles;\n    });\n  };\n\nexport function createProfilesStore(\n  cellClient: CellClient,\n  zomeName = 'profiles'\n): ProfilesStore {\n  const knownProfilesStore: Writable<Dictionary<Profile>> = writable({});\n\n  const service = new ProfilesService(cellClient, zomeName);\n\n  const myAgentPubKey = serializeHash(cellClient.cellId[1]);\n\n  const myProfile: Readable<Profile> = derived(\n    knownProfilesStore,\n    profiles => profiles[myAgentPubKey]\n  );\n\n  return {\n    myAgentPubKey,\n    knownProfiles: derived(knownProfilesStore, profiles => profiles),\n    myProfile,\n    fetchAllProfiles: fetchAllProfiles(service, knownProfilesStore),\n    fetchAgentProfile: fetchAgentProfile(service, knownProfilesStore),\n    fetchMyProfile: fetchMyProfile(service, knownProfilesStore),\n    searchProfiles: searchProfiles(service, knownProfilesStore),\n    createProfile: createProfile(service, knownProfilesStore, myAgentPubKey),\n  };\n}\n"]}