{"version":3,"file":"create-profile-form.js","sourceRoot":"","sources":["../../src/elements/create-profile-form.ts"],"names":[],"mappings":"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","sourcesContent":["import { html } from 'lit';\nimport { query, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { requestContext } from '@holochain-open-dev/context';\nimport { ScopedRegistryHost } from '@lit-labs/scoped-registry-mixin';\nimport { MobxLitElement } from '@adobe/lit-mobx';\n\nimport { TextField } from 'scoped-material-components/mwc-textfield';\nimport { Button } from 'scoped-material-components/mwc-button';\nimport { Card } from 'scoped-material-components/mwc-card';\nimport { Ripple } from 'scoped-material-components/mwc-ripple';\nimport { Icon } from 'scoped-material-components/mwc-icon';\nimport Avatar from '@ui5/webcomponents/dist/Avatar';\n\nimport { sharedStyles } from './utils/shared-styles';\nimport { Dictionary, PROFILES_STORE_CONTEXT } from '../types';\nimport { ProfilesStore } from '../profiles.store';\n\n/**\n * @element create-profile-form\n * @fires profile-created - after the profile has been created\n */\nexport class CreateProfileForm extends ScopedRegistryHost(MobxLitElement) {\n  /** Public attributes */\n\n  /**\n   * Minimum length that the nickname needs to have\n   * @attr min-length\n   */\n  @property({ type: Number, attribute: 'min-length' })\n  minLength = 3;\n\n  /** Private properties */\n\n  @query('#nickname-field')\n  _nicknameField!: TextField;\n\n  @query('#avatar-file-picker')\n  _avatarFilePicker!: HTMLInputElement;\n\n  _existingUsernames: { [key: string]: boolean } = {};\n\n  @state()\n  _avatar: string | undefined = undefined;\n\n  @requestContext(PROFILES_STORE_CONTEXT)\n  _store!: ProfilesStore;\n\n  firstUpdated() {\n    this._nicknameField.validityTransform = (newValue: string) => {\n      this.requestUpdate();\n      if (newValue.length < this.minLength) {\n        this._nicknameField.setCustomValidity(\n          `Username is too shot, min. ${this.minLength} characters`\n        );\n        return {\n          valid: false,\n        };\n      } else if (this._existingUsernames[newValue]) {\n        this._nicknameField.setCustomValidity('This nickname already exists');\n        return { valid: false };\n      }\n\n      return {\n        valid: true,\n      };\n    };\n  }\n\n  static get styles() {\n    return sharedStyles;\n  }\n\n  async createProfile() {\n    const nickname = this._nicknameField.value;\n\n    try {\n      const fields: Dictionary<string> = {};\n      if (this._avatar) {\n        fields['avatar'] = this._avatar;\n      }\n      await this._store.createProfile({\n        nickname,\n        fields,\n      });\n\n      this.dispatchEvent(\n        new CustomEvent('profile-created', {\n          detail: {\n            profile: {\n              nickname,\n              fields,\n            },\n          },\n          bubbles: true,\n          composed: true,\n        })\n      );\n    } catch (e) {\n      this._existingUsernames[nickname] = true;\n      this._nicknameField.reportValidity();\n    }\n  }\n\n  // Crop the image and return a base64 bytes string of its content\n  cropPlusExport(\n    img: HTMLImageElement,\n    cropX: number,\n    cropY: number,\n    cropWidth: number,\n    cropHeight: number\n  ) {\n    // create a temporary canvas sized to the cropped size\n    const canvas1 = document.createElement('canvas');\n    const ctx1 = canvas1.getContext('2d');\n    canvas1.width = cropWidth;\n    canvas1.height = cropHeight;\n    // use the extended from of drawImage to draw the\n    // cropped area to the temp canvas\n    ctx1?.drawImage(\n      img,\n      cropX,\n      cropY,\n      cropWidth,\n      cropHeight,\n      0,\n      0,\n      cropWidth,\n      cropHeight\n    );\n    // return the .toDataURL of the temp canvas\n    return canvas1.toDataURL();\n  }\n\n  onAvatarUploaded() {\n    if (this._avatarFilePicker.files && this._avatarFilePicker.files[0]) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onload = () => {\n          this._avatar = this.cropPlusExport(img, 0, 0, 100, 100);\n        };\n        img.src = e.target?.result as string;\n      };\n      reader.readAsDataURL(this._avatarFilePicker.files[0]);\n    }\n  }\n\n  render() {\n    return html`\n      <input\n        type=\"file\"\n        id=\"avatar-file-picker\"\n        style=\"display: none;\"\n        @change=${this.onAvatarUploaded}\n      />\n      <mwc-card style=\"width: auto\">\n        <div class=\"column\" style=\"margin: 16px;\">\n          <span class=\"title\" style=\"margin-bottom: 24px;\">Create Profile</span>\n          <div class=\"row center-content\">\n            ${this._avatar\n              ? html`\n                  <ui5-avatar\n                    label=\"Avatar\"\n                    image=\"${this._avatar}\"\n                    style=\"margin-bottom: 19px;\"\n                  ></ui5-avatar>\n                `\n              : html`\n                  <div\n                    @click=${() => this._avatarFilePicker.click()}\n                    style=\"width: 100px; height: 80px; margin-right: 8px; border-radius: 4px; position: relative; background-color: #d3d3d373; cursor: pointer;\"\n                    class=\"column center-content\"\n                  >\n                    <mwc-ripple></mwc-ripple>\n\n                    <mwc-icon style=\"margin-bottom: 8px;\">add</mwc-icon>\n                    <span>Avatar</span>\n                  </div>\n                `}\n\n            <mwc-textfield\n              id=\"nickname-field\"\n              outlined\n              label=\"Nickname\"\n              @input=${() => this._nicknameField.reportValidity()}\n              style=\"margin-left: 8px;\"\n            ></mwc-textfield>\n          </div>\n          <mwc-button\n            id=\"create-profile-button\"\n            raised\n            class=${classMap({\n              'small-margin': !!this._nicknameField,\n              'big-margin': !this._nicknameField,\n            })}\n            .disabled=${!this._nicknameField ||\n            !this._nicknameField.validity.valid}\n            label=\"CREATE PROFILE\"\n            @click=${() => this.createProfile()}\n          ></mwc-button>\n        </div>\n      </mwc-card>\n    `;\n  }\n\n  static elementDefinitions = {\n    'mwc-textfield': TextField,\n    'mwc-button': Button,\n    'mwc-icon': Icon,\n    'mwc-card': Card,\n    'mwc-ripple': Ripple,\n    'ui5-avatar': Avatar,\n  };\n}\n"]}